
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Global default: Deny all reads and writes by default.
    // match /{document=**} {
    //   allow read, write: if false;
    // }
    // THIS RULE ABOVE WILL BLOCK EVERYTHING. REPLACE IT OR COMMENT IT OUT.

    // More permissive rules for development (replace with authenticated rules for production)

    // App Settings: Allow reading active match configuration
    match /app_settings/{settingId} {
      allow read: if true; 
      // Allow write only for admins (requires authentication and role check)
      // allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow write: if true; // TEMPORARY FOR DEVELOPMENT WITHOUT AUTH
    }

    // Schedules (Tanding & TGR): Allow reading schedules for everyone
    // Allow creating, updating, deleting only for admins
    match /schedules_tanding/{scheduleId} {
      allow read: if true;
      // allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow write: if true; // TEMPORARY FOR DEVELOPMENT WITHOUT AUTH
    }

    match /schedules_tgr/{scheduleId} {
      allow read: if true;
      // allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow write: if true; // TEMPORARY FOR DEVELOPMENT WITHOUT AUTH
    }

    // Match Data (Tanding):
    // - Allow reading match data (e.g., for monitoring)
    // - Allow dewan/timer to update their specific sections
    // - Allow ketua pertandingan to update status/winner
    match /matches_tanding/{matchId} {
      allow read: if true; // For monitoring score, etc.
      // Allow dewan to write to dewan_data and timer_status
      // allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'dewan';
      // Allow ketua_pertandingan to update specific fields like 'winner', 'status'
      // allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ketua_pertandingan'
      //                 && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['winner', 'status', 'lastUpdated']);
      
      // For development, allow general write. Secure this with auth.
      allow write: if true; // TEMPORARY FOR DEVELOPMENT WITHOUT AUTH
 		
    match /official_actions/{actionId} {
    allow read: if true;
    allow write: if true;
    }

      // Juri Scores for Tanding:
      // - Juri can only write to their own document {juriId}
      // - Allow reading scores (e.g., for monitoring or dewan)
      match /juri_scores/{juriId} {
        allow read: if true;
        // allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedJuriId == juriId;
        // Ensure that juriId in path matches the juri's assigned ID from their user profile (requires user profiles with roles)
        allow write: if true; // TEMPORARY FOR DEVELOPMENT WITHOUT AUTH
      }
    }

    // Match Data (TGR) - Define similar rules as Tanding, adjusted for TGR structure
    match /matches_tgr/{matchId} {
      allow read: if true;
      allow write: if true; // TEMPORARY FOR DEVELOPMENT WITHOUT AUTH. Secure this.

      match /juri_scores/{juriId} {
        allow read: if true;
        allow write: if true; // TEMPORARY FOR DEVELOPMENT WITHOUT AUTH. Secure this.
      }
    }

    // Example: User profiles (if you add authentication)
    // match /users/{userId} {
    //   allow read: if true;
    //   allow write: if request.auth != null && request.auth.uid == userId;
    // }
  }
}

    